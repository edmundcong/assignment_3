
typedef struct result_struct {
    uint32_t *matrix;
    int i;
} result_struct;

void matrix_pow_worker(result_struct result);


void matrix_pow_worker(result_struct result){



    int i = result.i;

    int temp = result.matrix[i];

    temp = temp*temp;
    printf("temp is %d\n", temp);

    result.matrix[i] = temp;

    return (void)&result;
}

uint32_t *matrix_pow(const uint32_t *matrix, uint32_t exponent) {

    uint32_t *result = new_matrix();

    if (exponent <= 2) {
        for (ssize_t i = 0; i < g_elements; i++) {
            result[i] = matrix[i] * matrix[i]; //opreate sequentially
            return result;
        }
    }

    int half_threads = 0;

    if (exponent % 2 == 0) {
        half_threads = half_threads/2;
    } else {
        half_threads = (half_threads/2) + 1;
    }

    int       thread_id[half_threads];
    pthread_t threads[half_threads]; //creaitng half amount of threads

    int           j              = 0;
    result_struct *matrix_struct = (result_struct *)malloc(sizeof(result_struct));

    for (int i = 0; i < g_elements; i++) {
        result[i] = matrix[i];
        //create
        for (j = 0; j < half_threads; j++) {
            thread_id[j]          = j;
            matrix_struct->matrix = result;
            matrix_struct->i      = i;
            pthread_create(&threads[j], NULL, (void *)matrix_pow_worker, (void *)&matrix_struct);
        }
        //join threads
        for (j = 0; j < half_threads; j++) {

        }
    }

    free(matrix_struct);

    return result;
}
